<launch>
    
    <!-- Notes -->
    <!-- 
    Add error band so it tolerates the overshoot better.
    Use "open-loop" control by predicting what PWM we need for a specific velocity
    and then adjust that value once every few seconds based on a larger number of 
    velocity readings.
    Use predictive method to predict velocity.
    Use second-order P controller with error.
    
    -Hardware fixes
    
    -->
    
    <!--==========================-->
    <!-- Parameters and Arguments -->
    <!--==========================-->
    <arg name="deadman" default="4" />
    <arg name="port_steering" default="/dev/ttyACM0" />
    <arg name="port_accelerator_encoder" default="/dev/ttyACM1" />
    <arg name="joy_dev" default="/dev/input/js0" />

    <!--========================-->
    <!-- Joystick Control Nodes -->
    <!--========================-->
    <node pkg="joy" type="joy_node" name="joy_node">
        <param name="dev" value="$(arg joy_dev)" />
        <param name="deadzone" value="0.3" />
        <param name="autorepeat_rate" value="20" />
    </node>

    <node pkg="motion_testing" type="joystick_control.py" name="joystick_control" output="screen">
        <param name="deadman" value="$(arg deadman)"/>
        <param name="vel_max" value="1.0" />
    </node>
    
    <!--========================-->
    <!-- Steering Control Nodes -->
    <!--========================-->
    <!-- The arduino running this code can be an UNO or a MEGA and should be running "motion_testing/src/steering_publish/steering_publish.ino", see file for wiring -->
    <node pkg="rosserial_python" type="serial_node.py" name="steering_node_arduino">
        <param name="port" value="$(arg port_steering)" />
    </node>
    <node pkg="sensors" type="steering_node" name="steering_node" />
    
    <!--========================-->
    <!-- Velocity Control Nodes -->
    <!--========================-->
    <!-- The arduino running this code should be a MEGA and should be running "motion_testing/src/accelerator_encoder.ino", see file for wiring -->
    <node pkg="rosserial_python" type="serial_node.py" name="accelerator_encoder_arduino">
        <param name="port" value="$(arg port_accelerator_encoder)" />
    </node>
    <node pkg="motion_testing" type="velocity_two_pid_delta.py" name="velocity_two_pid_delta" output="screen">
        <param name="deadman" value="4"/>
        <param name="Kp1" value="1.0"/>
        <param name="Ki1" value="0"/>
        <param name="Kd1" value="0"/>
        <param name="Kp2" value="0.5"/>
        <param name="Ki2" value="0"/>
        <param name="Kd2" value="0"/>
        <param name="delta_max" value="10" />
        <param name="delta_min" value="-1" />
        <param name="error_tolerance" value="0.3" />
    </node>
    
</launch>
