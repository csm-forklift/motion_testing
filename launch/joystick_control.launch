<launch>
    
    <!--==========================-->
    <!-- Parameters and Arguments -->
    <!--==========================-->
    <arg name="manual_deadman" default="4"/>
    <arg name="autonomous_deadman" default="5"/>
    <arg name="timeout" default="1.0"/>
    <arg name="port_steering" default="/dev/ttyACM0"/>
    <arg name="port_accelerator_encoder" default="/dev/ttyACM1"/>
    <arg name="port_clamp" default="/dev/ttyACM2"/>
    <arg name="joy_dev" default="/dev/input/js0"/>

    <!--========================-->
    <!-- Joystick Control Nodes -->
    <!--========================--> 
    <node pkg="joy" type="joy_node" name="joy_node">
        <param name="dev" value="$(arg joy_dev)"/>
        <param name="deadzone" value="0.3"/>
        <param name="autorepeat_rate" value="20"/>
    </node>

    <node pkg="motion_testing" type="joystick_control.py" name="joystick_control" output="screen">
        <param name="manual_deadman" value="$(arg manual_deadman)"/>
        <param name="autonomous_deadman" value="$(arg autonomous_deadman)"/>
        <param name="timeout" value="$(arg timeout)"/>
        <param name="vel_max" value="0.5"/>
        <param name="clamp_scale" value="1.0"/>
    </node>
    
    <!--========================-->
    <!-- Steering Control Nodes -->
    <!--========================-->
    <include file="$(find sensors)/launch/localization_steer.launch">
        <arg name="port_steering" value="$(arg port_steering)"/>
    </include>
    <node pkg="motion_testing" type="steering_node.py" name="steering_node" output="screen">
        <param name="manual_deadman" value="$(arg manual_deadman)"/>
        <param name="autonomous_deadman" value="$(arg autonomous_deadman)"/>
        <param name="timeout" value="$(arg timeout)"/>
    </node>
    
    <!--========================-->
    <!-- Velocity Control Nodes -->
    <!--========================-->
    <!--
    NOTE: the canbus velocity reading and IMU data should be collected
          through the Raspberry Pi by running the following commands:
          1) $ sudo slcan_add.sh (this starts the canbus reader)
          2) $ roslaunch sensors localization_velocity_imu.launch (reads imu and
               canbus data)
    -->
    <!-- The arduino running this code must be a MEGA and should be running "motion_testing/src/accelerator_encoder_gear_analog.ino", see file for wiring -->
    <node pkg="rosserial_python" type="serial_node.py" name="accelerator_encoder_gear_arduino">
        <param name="port" value="$(arg port_accelerator_encoder)"/>
    </node>
    <node pkg="motion_testing" type="velocity_gear_two_pid_delta.py" name="velocity_gear_two_pid_delta" output="screen">
        <param name="manual_deadman" value="$(arg manual_deadman)"/>
        <param name="autonomous_deadman" value="$(arg autonomous_deadman)"/>
        <param name="timeout" value="$(arg timeout)"/>
        <param name="Kp1" value="1.5"/>
        <param name="Ki1" value="0"/>
        <param name="Kd1" value="0"/>
        <param name="Kp2" value="1.0"/>
        <param name="Ki2" value="0"/>
        <param name="Kd2" value="0"/>
        <param name="delta_max" value="100"/>
        <param name="delta_min" value="-100"/>
        <param name="error_tolerance" value="0.05"/>
        <param name="error_exponent1" value="2.0" />
        <param name="error_exponent2" value="1.0" />
    </node>
    
    <!--=====================-->
    <!-- Clamp Control Nodes -->
    <!--=====================-->
    <!-- The arduino running this code must be a MEGA and should be running "grasping/src/clamp_switch/clamp_switch.ino", see file for wiring -->
    <node pkg="rosserial_python" type="serial_node.py" name="clamp_switch_arduino">
        <param name="port" value="$(arg port_clamp)"/>
    </node>
    
</launch>
